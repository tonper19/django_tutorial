Test a view
The polls application is fairly undiscriminating: it will publish any question, 
including ones whose pub_date field lies in the future. We should improve this. 
Setting a pub_date in the future should mean that the Question is published at 
that moment, but invisible until then.

A test for a view
When we fixed the bug above, we wrote the test first and then the code to fix 
it. In fact that was an example of test-driven development, but it doesn’t 
really matter in which order we do the work.

In our first test, we focused closely on the internal behavior of the code. For 
this test, we want to check its behavior as it would be experienced by a user 
through a web browser.

Before we try to fix anything, let’s have a look at the tools at our disposal.

The Django test client
Django provides a test Client to simulate a user interacting with the code at 
the view level. We can use it in tests.py or even in the shell.

We will start again with the shell, where we need to do a couple of things that 
won’t be necessary in tests.py. The first is to set up the test environment in 
the shell:

    $ python manage.py shell
    >>> from django.test.utils import setup_test_environment
    >>> setup_test_environment()

setup_test_environment() installs a template renderer which will allow us to 
examine some additional attributes on responses such as response.context that 
otherwise wouldn’t be available. Note that this method does not setup a test 
database, so the following will be run against the existing database and the 
output may differ slightly depending on what questions you already created. You 
might get unexpected results if your TIME_ZONE in settings.py isn’t correct. 
If you don’t remember setting it earlier, check it before continuing.

Next we need to import the test client class (later in tests.py we will use the 
django.test.TestCase class, which comes with its own client, so this won’t be 
required):

    >>> from django.test import Client
    >>> # create an instance of the client for our use
    >>> client = Client()

With that ready, we can ask the client to do some work for us:

    >>> # get a response from '/'
    >>> response = client.get('/')
    Not Found: /
    >>> # we should expect a 404 from that address; if you instead see an
    >>> # "Invalid HTTP_HOST header" error and a 400 response, you probably
    >>> # omitted the setup_test_environment() call described earlier.
    >>> response.status_code
    404
    >>> # on the other hand we should expect to find something at '/polls/'
    >>> # we'll use 'reverse()' rather than a hardcoded URL
    >>> from django.urls import reverse
    >>> response = client.get(reverse('polls:index'))
    >>> response.status_code
    200
    >>> response.content
    b'\n    <ul>\n    \n        <li><a href="/polls/1/">What&#x27;s up?</a></li>\n    \n    </ul>\n\n'
    >>> response.context['latest_question_list']
    <QuerySet [<Question: What's up?>]>

Improving our view
The list of polls shows polls that aren’t published yet (i.e. those that have a 
pub_date in the future). Let’s fix that.

In Tutorial 4 we introduced a class-based view, based on ListView:

polls/views.py
    class IndexView(generic.ListView):
        template_name = 'polls/index.html'
        context_object_name = 'latest_question_list'

        def get_queryset(self):
            """Return the last five published questions."""
            return Question.objects.order_by('-pub_date')[:5]

We need to amend the get_queryset() method and change it so that it also checks 
the date by comparing it with timezone.now(). First we need to add an import:

polls/views.py
    from django.utils import timezone
    and then we must amend the get_queryset method like so:

    polls/views.py
    def get_queryset(self):
        """
        Return the last five published questions (not including those set to be
        published in the future).
        """
        return Question.objects.filter(
            pub_date__lte=timezone.now()
        ).order_by('-pub_date')[:5]

Question.objects.filter(pub_date__lte=timezone.now()) returns a queryset 
containing Questions whose pub_date is less than or equal to - that is, earlier 
than or equal to - timezone.now.

Testing our new view
Now you can satisfy yourself that this behaves as expected by firing up 
runserver, loading the site in your browser, creating Questions with dates in 
the past and future, and checking that only those that have been published are 
listed. You don’t want to have to do that every single time you make any change 
that might affect this - so let’s also create a test, based on our shell 
session above.

Add the following to polls/tests.py:

polls/tests.py
    from django.urls import reverse

and we’ll create a shortcut function to create questions as well as a new test class:

polls/tests.py
    def create_question(question_text, days):
        """
        Create a question with the given `question_text` and published the
        given number of `days` offset to now (negative for questions published
        in the past, positive for questions that have yet to be published).
        """
        time = timezone.now() + datetime.timedelta(days=days)
        return Question.objects.create(question_text=question_text, pub_date=time)


    class QuestionIndexViewTests(TestCase):
        def test_no_questions(self):
            """
            If no questions exist, an appropriate message is displayed.
            """
            response = self.client.get(reverse('polls:index'))
            self.assertEqual(response.status_code, 200)
            self.assertContains(response, "No polls are available.")
            self.assertQuerysetEqual(response.context['latest_question_list'], [])

        def test_past_question(self):
            """
            Questions with a pub_date in the past are displayed on the
            index page.
            """
            create_question(question_text="Past question.", days=-30)
            response = self.client.get(reverse('polls:index'))
            self.assertQuerysetEqual(
                response.context['latest_question_list'],
                ['<Question: Past question.>']
            )

        def test_future_question(self):
            """
            Questions with a pub_date in the future aren't displayed on
            the index page.
            """
            create_question(question_text="Future question.", days=30)
            response = self.client.get(reverse('polls:index'))
            self.assertContains(response, "No polls are available.")
            self.assertQuerysetEqual(response.context['latest_question_list'], [])

        def test_future_question_and_past_question(self):
            """
            Even if both past and future questions exist, only past questions
            are displayed.
            """
            create_question(question_text="Past question.", days=-30)
            create_question(question_text="Future question.", days=30)
            response = self.client.get(reverse('polls:index'))
            self.assertQuerysetEqual(
                response.context['latest_question_list'],
                ['<Question: Past question.>']
            )

        def test_two_past_questions(self):
            """
            The questions index page may display multiple questions.
            """
            create_question(question_text="Past question 1.", days=-30)
            create_question(question_text="Past question 2.", days=-5)
            response = self.client.get(reverse('polls:index'))
            self.assertQuerysetEqual(
                response.context['latest_question_list'],
                ['<Question: Past question 2.>', '<Question: Past question 1.>']
            )

Let’s look at some of these more closely.

First is a question shortcut function, create_question, to take some repetition 
out of the process of creating questions.

test_no_questions doesn’t create any questions, but checks the message: 
“No polls are available.” and verifies the latest_question_list is empty. Note 
that the django.test.TestCase class provides some additional assertion methods. 
In these examples, we use assertContains() and assertQuerysetEqual().

In test_past_question, we create a question and verify that it appears in the 
list.

In test_future_question, we create a question with a pub_date in the future. 
The database is reset for each test method, so the first question is no longer 
there, and so again the index shouldn’t have any questions in it.

And so on. In effect, we are using the tests to tell a story of admin input and 
user experience on the site, and checking that at every state and for every new 
change in the state of the system, the expected results are published.

Testing the DetailView
What we have works well; however, even though future questions don’t appear in 
the index, users can still reach them if they know or guess the right URL. So 
we need to add a similar constraint to DetailView:

polls/views.py
    class DetailView(generic.DetailView):
        ...
        def get_queryset(self):
            """
            Excludes any questions that aren't published yet.
            """
            return Question.objects.filter(pub_date__lte=timezone.now())

We should then add some tests, to check that a Question whose pub_date is in the past can be displayed, and that one with a pub_date in the future is not:

polls/tests.py
    class QuestionDetailViewTests(TestCase):
        def test_future_question(self):
            """
            The detail view of a question with a pub_date in the future
            returns a 404 not found.
            """
            future_question = create_question(question_text='Future question.', days=5)
            url = reverse('polls:detail', args=(future_question.id,))
            response = self.client.get(url)
            self.assertEqual(response.status_code, 404)

        def test_past_question(self):
            """
            The detail view of a question with a pub_date in the past
            displays the question's text.
            """
            past_question = create_question(question_text='Past Question.', days=-5)
            url = reverse('polls:detail', args=(past_question.id,))
            response = self.client.get(url)
            self.assertContains(response, past_question.question_text)

Ideas for more tests
We ought to add a similar get_queryset method to ResultsView and create a new 
test class for that view. It’ll be very similar to what we have just created; 
in fact there will be a lot of repetition.

We could also improve our application in other ways, adding tests along the 
way. For example, it’s silly that Questions can be published on the site that 
have no Choices. So, our views could check for this, and exclude such 
Questions. Our tests would create a Question without Choices and then test that 
it’s not published, as well as create a similar Question with Choices, and test 
that it is published.

Perhaps logged-in admin users should be allowed to see unpublished Questions, 
but not ordinary visitors. Again: whatever needs to be added to the software to 
accomplish this should be accompanied by a test, whether you write the test 
first and then make the code pass the test, or work out the logic in your code 
first and then write a test to prove it.
