Raising a 404 error
Now, let’s tackle the question detail view – the page that displays the 
question text for a given poll. Here’s the view:

polls/views.py
    from django.http import Http404
    from django.shortcuts import render

    from .models import Question
    # ...
    def detail(request, question_id):
        try:
            question = Question.objects.get(pk=question_id)
        except Question.DoesNotExist:
            raise Http404("Question does not exist")
        return render(request, 'polls/detail.html', {'question': question})

The new concept here: The view raises the Http404 exception if a question with 
the requested ID doesn’t exist.

We’ll discuss what you could put in that polls/detail.html template a bit 
later, but if you’d like to quickly get the above example working, a file 
containing just:

polls/templates/polls/detail.html

    {{ question }}

will get you started for now.

A shortcut: get_object_or_404()
It’s a very common idiom to use get() and raise Http404 if the object doesn’t 
exist. Django provides a shortcut. Here’s the detail() view, rewritten:

polls/views.py

    from django.shortcuts import get_object_or_404, render

    from .models import Question
    # ...
    def detail(request, question_id):
        question = get_object_or_404(Question, pk=question_id)
        return render(request, 'polls/detail.html', {'question': question})

The get_object_or_404() function takes a Django model as its first argument and 
an arbitrary number of keyword arguments, which it passes to the get() function 
of the model’s manager. It raises Http404 if the object doesn’t exist.

Philosophy

Why do we use a helper function get_object_or_404() instead of automatically 
catching the ObjectDoesNotExist exceptions at a higher level, or having the 
model API raise Http404 instead of ObjectDoesNotExist?

Because that would couple the model layer to the view layer. One of the 
foremost design goals of Django is to maintain loose coupling. Some controlled 
coupling is introduced in the django.shortcuts module.

There’s also a get_list_or_404() function, which works just as 
get_object_or_404() – except using filter() instead of get(). It raises Http404 
if the list is empty.
