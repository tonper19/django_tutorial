Use generic views: Less code is better
The detail() (from Tutorial 3) and results() views are very short – and, as 
mentioned above, redundant. The index() view, which displays a list of polls, 
is similar.

These views represent a common case of basic Web development: getting data from 
the database according to a parameter passed in the URL, loading a template and 
returning the rendered template. Because this is so common, Django provides a 
shortcut, called the “generic views” system.

Generic views abstract common patterns to the point where you don’t even need 
to write Python code to write an app.

Let’s convert our poll app to use the generic views system, so we can delete a 
bunch of our own code. We’ll have to take a few steps to make the conversion. 
We will:

Convert the URLconf.
Delete some of the old, unneeded views.
Introduce new views based on Django’s generic views.
Read on for details.

Why the code-shuffle?

Generally, when writing a Django app, you’ll evaluate whether generic views are 
a good fit for your problem, and you’ll use them from the beginning, rather 
than refactoring your code halfway through. But this tutorial intentionally has 
focused on writing the views “the hard way” until now, to focus on core 
concepts.

You should know basic math before you start using a calculator.

Amend URLconf
First, open the polls/urls.py URLconf and change it like so:

polls/urls.py
    from django.urls import path

    from . import views

    app_name = 'polls'
    urlpatterns = [
        path('', views.IndexView.as_view(), name='index'),
        path('<int:pk>/', views.DetailView.as_view(), name='detail'),
        path('<int:pk>/results/', views.ResultsView.as_view(), name='results'),
        path('<int:question_id>/vote/', views.vote, name='vote'),
    ]

Note that the name of the matched pattern in the path strings of the second and 
third patterns has changed from <question_id> to <pk>.

Amend views
Next, we’re going to remove our old index, detail, and results views and use 
Django’s generic views instead. To do so, open the polls/views.py file and 
change it like so:

polls/views.py
    from django.http import HttpResponseRedirect
    from django.shortcuts import get_object_or_404, render
    from django.urls import reverse
    from django.views import generic

    from .models import Choice, Question


    class IndexView(generic.ListView):
        template_name = 'polls/index.html'
        context_object_name = 'latest_question_list'

        def get_queryset(self):
            """Return the last five published questions."""
            return Question.objects.order_by('-pub_date')[:5]


    class DetailView(generic.DetailView):
        model = Question
        template_name = 'polls/detail.html'


    class ResultsView(generic.DetailView):
        model = Question
        template_name = 'polls/results.html'


    def vote(request, question_id):
        ... # same as above, no changes needed.

We’re using two generic views here: ListView and DetailView. Respectively, 
those two views abstract the concepts of “display a list of objects” and 
“display a detail page for a particular type of object.”

Each generic view needs to know what model it will be acting upon. This is 
provided using the model attribute.
The DetailView generic view expects the primary key value captured from the URL 
to be called "pk", so we’ve changed question_id to pk for the generic views.
By default, the DetailView generic view uses a template called 
<app name>/<model name>_detail.html. In our case, it would use the template 
"polls/question_detail.html". The template_name attribute is used to tell 
Django to use a specific template name instead of the autogenerated default 
template name. We also specify the template_name for the results list view – 
this ensures that the results view and the detail view have a different 
appearance when rendered, even though they’re both a DetailView behind the 
scenes.

Similarly, the ListView generic view uses a default template called 
<app name>/<model name>_list.html; we use template_name to tell ListView to use 
our existing "polls/index.html" template.

In previous parts of the tutorial, the templates have been provided with a 
context that contains the question and latest_question_list context variables. 
For DetailView the question variable is provided automatically – since we’re 
using a Django model (Question), Django is able to determine an appropriate 
name for the context variable. However, for ListView, the automatically 
generated context variable is question_list. To override this we provide the 
context_object_name attribute, specifying that we want to use 
latest_question_list instead. As an alternative approach, you could change your 
templates to match the new default context variables – but it’s a lot easier to 
tell Django to use the variable you want.

Run the server, and use your new polling app based on generic views.
