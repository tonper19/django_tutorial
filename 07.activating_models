Activating models
That small bit of model code gives Django a lot of information. With it, Django 
is able to:

Create a database schema (CREATE TABLE statements) for this app.
Create a Python database-access API for accessing Question and Choice objects.
But first we need to tell our project that the polls app is installed.

Philosophy

Django apps are “pluggable”: You can use an app in multiple projects, and you 
can distribute apps, because they don’t have to be tied to a given Django 
installation.

To include the app in our project, we need to add a reference to its 
configuration class in the INSTALLED_APPS setting. The PollsConfig class is in 
the polls/apps.py file, so its dotted path is 'polls.apps.PollsConfig'. Edit 
the mysite/settings.py file and add that dotted path to the INSTALLED_APPS 
setting. It’ll look like this:

mysite/settings.py
    INSTALLED_APPS = [
        'polls.apps.PollsConfig',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

Now Django knows to include the polls app. Let’s run another command:


$ python manage.py makemigrations polls
You should see something similar to the following:

Migrations for 'polls':
  polls/migrations/0001_initial.py
    - Create model Question
    - Create model Choice
By running makemigrations, you’re telling Django that you’ve made some changes 
to your models (in this case, you’ve made new ones) and that you’d like the 
changes to be stored as a migration.

Migrations are how Django stores changes to your models (and thus your database 
schema) - they’re files on disk. You can read the migration for your new model 
if you like; it’s the file polls/migrations/0001_initial.py. Don’t worry, 
you’re not expected to read them every time Django makes one, but they’re 
designed to be human-editable in case you want to manually tweak how Django 
changes things.

There’s a command that will run the migrations for you and manage your database 
schema automatically - that’s called migrate, and we’ll come to it in a 
moment - but first, let’s see what SQL that migration would run. The sqlmigrate 
command takes migration names and returns their SQL:

$ python manage.py sqlmigrate polls 0001

Now, run migrate again to create those model tables in your database:

$ python manage.py migrate

The migrate command takes all the migrations that haven’t been applied (Django 
tracks which ones are applied using a special table in your database called 
django_migrations) and runs them against your database - essentially, 
synchronizing the changes you made to your models with the schema in the 
database.

Migrations are very powerful and let you change your models over time, as you 
develop your project, without the need to delete your database or tables and 
make new ones - it specializes in upgrading your database live, without losing 
data. We’ll cover them in more depth in a later part of the tutorial, but for 
now, remember the three-step guide to making model changes:

Change your models (in models.py).
Run python manage.py makemigrations to create migrations for those changes
Run python manage.py migrate to apply those changes to the database.
The reason that there are separate commands to make and apply migrations is 
because you’ll commit migrations to your version control system and ship them 
with your app; they not only make your development easier, they’re also usable 
by other developers and in production.